<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>louguanstar.com</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://louguanstar.com/</link>
    <atom:link href="http://louguanstar.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 16 Jul 2017 16:06:51 +0800</pubDate>
    <lastBuildDate>Sun, 16 Jul 2017 16:06:51 +0800</lastBuildDate>
    <generator>Jekyll v3.1.3</generator>
    
      <item>
        <title>总结之前工作中常用的命令</title>
        <description>&lt;h3 id=&quot;hadoop&quot;&gt;关于hadoop&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#手动切换active与standby
sudo -u hdfs hdfs haadmin -failover nn2 nn1
#查看namenode状态
sudo -u hdfs hdfs haadmin -getServiceState nn1
#启动standby
sudo -u hdfs hadoop namenode -bootstrapStandby
#退出safe mode
sudo -u hdfs hadoop dfsadmin -safemode leave
#刷新hdfs节点
sudo hadoop dfsadmin -refreshNodes
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;yarn&quot;&gt;关于YARN&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#查看application日志
yarn logs -applicationId application_..._0010
#杀掉某个job
sudo -u yarn yarn application -kill application_..._0004
#刷新yarn节点
sudo yarn rmadmin -refreshNodes
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;kerberos&quot;&gt;Kerberos&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#Kerberos初始化简要
krb5.conf
kadm5.acl
kdb5_util create -r LOUGUANSTAR.COM -s
shell% kadmin.local
kadmin.local: addprinc admin/admin@LOUGUANSTAR.COM
krb5kdc
kadmind
#列出所有principal
kadmin.local -q &quot;list_principals&quot;
kadmin.local -q &quot;listprincs&quot;
#添加principal
kadmin.local -q &quot;addprinc -randkey test/test1.louguanstar.com@LOUGUANSTAR.COM&quot;
#生成keytab
kadmin.local -q &quot;ktadd -k impala116.keytab test/test1.louguanstar.com@LOUGUANSTAR.COM&quot;
kadmin.local -q &quot;ktadd -k impala163.keytab test/test1.louguanstar.com@LOUGUANSTAR.COM adc/test1.louguanstar.com@LOUGUANSTAR.COM&quot;
#认证
kinit -kt yarn.keytab yarn/yarn.louguanstar.com@LOUGUANSTAR.COM
#删除principal
kadmin.local -q &quot;delprinc spark_deploy@LENOVOMM2.COM&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;hive&quot;&gt;Hive&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#hdfs集群名更换后hive不能启动，需要修改metastore
UPDATE `SDS` SET `LOCATION` = replace(LOCATION, &#39;master:9000&#39;, &#39;louguanstar&#39;);
#hive查看建表语句
show create table dbname.tablename
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section&quot;&gt;其他&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;#查看某个java进程的“日志”
jstack PID
#jvm申请内存问题，修改Linux内存管理方式
sysctl vm.overcommit_memory=1
/etc/sysctl.conf
vm.overcommit_memory = 1
#CDH使用的所有端口
cdh port:https://www.cloudera.com/documentation/enterprise/5-2-x/topics/cdh_ig_ports_cdh5.html#topic_9_1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Sat, 15 Jul 2017 00:00:00 +0800</pubDate>
        <link>http://louguanstar.com/2017/07/15/%E6%80%BB%E7%BB%93%E4%B9%8B%E5%89%8D%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4.html</link>
        <guid isPermaLink="true">http://louguanstar.com/2017/07/15/%E6%80%BB%E7%BB%93%E4%B9%8B%E5%89%8D%E5%B7%A5%E4%BD%9C%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E5%91%BD%E4%BB%A4.html</guid>
        
        
      </item>
    
      <item>
        <title>Hdsf上get数据后文件大10倍</title>
        <description>&lt;h4 id=&quot;hdfsgetgethdfs10&quot;&gt;从HDFS上get下一个目录，get下之后目录体积为HDFS上10+倍&lt;/h4&gt;

&lt;h3 id=&quot;section&quot;&gt;问题产生&lt;/h3&gt;

&lt;p&gt;从HDFS上get下一个目录，目录原本很小以为会很快，查看了下本地目录大小，却逐渐超过hdfs上10倍之多&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HDFS上文件大小
[louguanstar@localhost ~]$ sudo hadoop fs -du -s -h /user/hive/warehouse/test.db
53.3 M  160.0 M  /user/hive/warehouse/test.db

完成后本地文件大小
[louguanstar@localhost ~]$ du -sh test.db
642M    test.db

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;推测可能是文件系统block大小影响的，但是10倍之多有些不可思议，好奇心驱使所以验证下
```
查看文件系统block大小
[louguanstar@localhost ~]$ sudo /sbin/tune2fs -l /dev/sda2
tune2fs 1.39 (29-May-2006)
Filesystem volume name:   /
…
Filesystem OS type:       Linux
Inode count:              25624576
Block count:              25599577
Reserved block count:     1279978
Free blocks:              14624498
Free inodes:              25103644
First block:              0
Block size:               4096
…&lt;/p&gt;

&lt;p&gt;统计文件个数
[louguanstar@localhost ~]$ ls -lR test.db |grep “^-“|wc -l
149179&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;文件数居然有如此之多，大致计算下&lt;code class=&quot;highlighter-rouge&quot;&gt;149179*4/1024=582.73046875&lt;/code&gt;及时每个文件都小于4K在本地文件系统已有583MB，此时结果已经很明了了&lt;/p&gt;
</description>
        <pubDate>Fri, 17 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://louguanstar.com/2017/03/17/HDSF%E4%B8%8Aget%E6%95%B0%E6%8D%AE%E5%90%8E%E6%96%87%E4%BB%B6%E5%A4%A710%E5%80%8D.html</link>
        <guid isPermaLink="true">http://louguanstar.com/2017/03/17/HDSF%E4%B8%8Aget%E6%95%B0%E6%8D%AE%E5%90%8E%E6%96%87%E4%BB%B6%E5%A4%A710%E5%80%8D.html</guid>
        
        
      </item>
    
      <item>
        <title>一次根目录满找不到占用空间文件问题</title>
        <description>&lt;h4 id=&quot;server98&quot;&gt;某台server突然根目录占用空间98%，但找不到占用空间的文件&lt;/h4&gt;

&lt;h3 id=&quot;section&quot;&gt;问题产生&lt;/h3&gt;

&lt;p&gt;发现一台server根目录占用满，使用df -h命令查看，根目录确实占用已90%&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[root@localhost /]# df -h
Filesystem            Size  Used Avail Use% Mounted on
/dev/sda1             190G  172G  8.0G  96% /
/dev/sdb1             2.7T  1.4T  1.2T  56% /hahaha

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;使用du命令查找/目录下大文件；使用&lt;code class=&quot;highlighter-rouge&quot;&gt;lsof | grep delete&lt;/code&gt;没有发现已删除文件进程仍占用的
```
[root@localhost ~]# du -sh –exclude=hahaha /*
8.5M    /bin
6.5M    /boot
4.0K    /CmdTool.log
388K    /dev
126M    /etc
116M    /home
149M    /lib
35M     /lib64
16K     /lost+found
8.0K    /media
12K     /MegaSAS.log
8.0K    /misc
7.9G    /mnt
17M     /Nagios-Plugin
44M     /opt
0       /proc
356K    /root
40M     /sbin
8.0K    /selinux
8.0K    /srv
0       /sys
100K    /tftpboot
2.2M    /tmp
6.2G    /usr
1.2G    /var&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
### 解决问题
将/目录再次挂载到/mnt下查看，发现异常,然后进入/mnt/hahaha目录下删除文件
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;[root@localhost /]# mount -o bind / /mnt
[root@localhost /]# du -sh   /mnt/*
8.5M    /mnt/bin
8.0K    /mnt/boot
4.0K    /mnt/CmdTool.log
165G    /mnt/hahaha
…
6.2G    /mnt/usr
1.2G    /mnt/var&lt;/p&gt;

&lt;p&gt;```&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;总结&lt;/h3&gt;
&lt;p&gt;在删除&lt;code class=&quot;highlighter-rouge&quot;&gt;/mnt/hahaha&lt;/code&gt;目录下的异常文件时先检查下文件内容以及使用&lt;code class=&quot;highlighter-rouge&quot;&gt;lsof&lt;/code&gt;确认下文件是否在被使用&lt;/p&gt;

&lt;p&gt;最终问题产生的根源是由于挂载的不细心，由于服务器一些基本维护另有分工所以造成了发现问题有些难度（和问题的产生）&lt;/p&gt;
</description>
        <pubDate>Mon, 06 Mar 2017 00:00:00 +0800</pubDate>
        <link>http://louguanstar.com/2017/03/06/%E4%B8%80%E6%AC%A1%E6%A0%B9%E7%9B%AE%E5%BD%95%E6%BB%A1%E6%89%BE%E4%B8%8D%E5%88%B0%E5%8D%A0%E7%94%A8%E7%A9%BA%E9%97%B4%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98.html</link>
        <guid isPermaLink="true">http://louguanstar.com/2017/03/06/%E4%B8%80%E6%AC%A1%E6%A0%B9%E7%9B%AE%E5%BD%95%E6%BB%A1%E6%89%BE%E4%B8%8D%E5%88%B0%E5%8D%A0%E7%94%A8%E7%A9%BA%E9%97%B4%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98.html</guid>
        
        
      </item>
    
      <item>
        <title>关于yum的变量</title>
        <description>&lt;p&gt;使用yum安装软件的Linux发行版，其关于yum源的配置一般如下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[base]
name=CentOS-$releasever - Base - 163.com
baseurl=http://mirrors.163.com/centos/$releasever/os/$basearch/
#mirrorlist=http://mirrorlist.centos.org/?release=$releasever&amp;amp;arch=$basearch&amp;amp;repo=os
gpgcheck=1
gpgkey=http://mirror.centos.org/centos/RPM-GPG-KEY-CentOS-6

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;其中出现了&lt;code class=&quot;highlighter-rouge&quot;&gt;$releasever&lt;/code&gt; , &lt;code class=&quot;highlighter-rouge&quot;&gt;$basearch&lt;/code&gt;这两个变量，于是搜索资料学习了下&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;查看变量&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可用如下命令查看yum中的变量&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; python -c &#39;import yum, pprint; yb = yum.YumBase(); pprint.pprint(yb.conf.yumvar, width=1)&#39;

 输出如下：
 Loaded plugins: fastestmirror
 {&#39;arch&#39;: &#39;ia32e&#39;,
  &#39;basearch&#39;: &#39;x86_64&#39;,
  &#39;releasever&#39;: &#39;6&#39;,
  &#39;uuid&#39;: &#39;d9361a3a-ca57-4c50-989d-7c5e09dba049&#39;}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;Ubuntu中的apt源配置文件样例&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;相比与yum，apt的源配置文件大致如下&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ubuntu:
deb http://mirrors.ustc.edu.cn/ubuntu/ xenial main restricted universe multiverse
deb http://mirrors.ustc.edu.cn/ubuntu/ xenial-security main restricted universe multiverse
deb http://mirrors.ustc.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse
deb http://mirrors.ustc.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse
deb http://mirrors.ustc.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse
deb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial main restricted universe multiverse
deb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial-security main restricted universe multiverse
deb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse
deb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial-proposed main restricted universe multiverse
deb-src http://mirrors.ustc.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;yum中两个相同软件名只有版本不同&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今天同样遇到一个问题，用yum查看安装的软件时发现有两个完全一样的软件，可用如下方式处理&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum list installed | grep datanode
hadoop-hdfs-datanode.x86_64    cdh5.5.0************
hadoop-hdfs-datanode.x86_64    cdh5.2.0************

处理方式：

sudo rpm -ev --noscripts --allmatches hadoop-hdfs-datanode
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 19 Jul 2016 00:00:00 +0800</pubDate>
        <link>http://louguanstar.com/2016/07/19/%E5%85%B3%E4%BA%8Eyum%E7%9A%84%E5%8F%98%E9%87%8F.html</link>
        <guid isPermaLink="true">http://louguanstar.com/2016/07/19/%E5%85%B3%E4%BA%8Eyum%E7%9A%84%E5%8F%98%E9%87%8F.html</guid>
        
        
      </item>
    
      <item>
        <title>Awk使用nr与fnr合并两个文件</title>
        <description>&lt;h3 id=&quot;awknrfnr&quot;&gt;使用awk的NR与FNR合并两个文件&lt;/h3&gt;
&lt;p&gt;工作遇到一个需求有如下两个文件：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;file a&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;store.louguanstar.com	5.6.7.8
app.louguanstar.com	1.2.3.4
foo.louguanstar.com	a.b.c.d
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;file b&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;foo.louguanstar.com	1300
store.louguanstar.com	1100
app.louguanstar.com	1200
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;现在需要把这个文件处理为如下样式然后加上xml文件头就行，用作hadoop集群的topology文件&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;node name=&quot;foo.louguanstar.com&quot; rack=&quot;/avatar/1300&quot;/&amp;gt;
&amp;lt;node name=&quot;a.b.c.d&quot; rack=&quot;/avatar/1300&quot;/&amp;gt;
&amp;lt;node name=&quot;store.louguanstar.com&quot; rack=&quot;/avatar/1100&quot;/&amp;gt;
&amp;lt;node name=&quot;5.6.7.8&quot; rack=&quot;/avatar/1100&quot;/&amp;gt;
&amp;lt;node name=&quot;app.louguanstar.com&quot; rack=&quot;/avatar/1200&quot;/&amp;gt;
&amp;lt;node name=&quot;1.2.3.4&quot; rack=&quot;/avatar/1200&quot;/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;awk可以使用自身变量NR和FNR来处理多个文件。&lt;/p&gt;

&lt;p&gt;NR：awk开始执行程序后所读取的数据行数。&lt;/p&gt;

&lt;p&gt;FNR：awk当前读取的记录数，FNR值小于等于NR（当awk读取第二个文件时，FNR是从0开始重新计数，而NR继续累加）。&lt;/p&gt;

&lt;p&gt;NR==FNR：用于在读取两个或两个以上的文件时，判断是不是在读取第一个文件。&lt;/p&gt;

&lt;p&gt;awk处理多个文件的基本语法是:
awk -F分隔符 ‘BEGIN { 初始化 } { 循环执行部分 } END { 结束处理 }’ file1 file2&lt;/p&gt;

&lt;p&gt;其中BEGIN和END可以省略，-F用来指定分割符&lt;/p&gt;

&lt;p&gt;最后使用如下命令就可以得到上面的结果：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;awk &#39;NR==FNR{a[$1]=$2}FNR&amp;lt;NR{print $1,a[$1],$2}&#39; a b | awk &#39;{print &quot;&amp;lt;node name=\&quot;&quot;$1&quot;\&quot; rack=\&quot;/avatar/&quot;$3&quot;\&quot;/&amp;gt;\n&amp;lt;node name=\&quot;&quot;$2&quot;\&quot; rack=\&quot;/avatar/&quot;$3&quot;\&quot;/&amp;gt;&quot;}&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;后面又发现使用awk可以统计每块网卡的网速，命令如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tmp1=`mktemp`
tmp2=`mktemp`
/bin/cat /proc/net/dev | awk &#39;NR&amp;gt;2 {print $1&quot; tx &quot;$2&quot; ,rx &quot;$10}&#39; |sed &#39;s/://&#39; &amp;gt;$tmp1
sleep 5
/bin/cat /proc/net/dev | awk &#39;NR&amp;gt;2 {print $1&quot; tx &quot;$2&quot; ,rx &quot;$10}&#39; |sed &#39;s/://&#39; &amp;gt;$tmp2

echo &quot;,
    \&quot;band_width_out\&quot;:{&quot;
awk &#39;NR==FNR{a[$1]=$3}NR&amp;gt;FNR{print &quot;        \&quot;&quot;$1&quot;\&quot;:\&quot;&quot;($3-a[$1])/5/1024&quot;MB/s\&quot;,&quot;}&#39; $tmp1 $tmp2

echo &quot;    },
    \&quot;band_width_in\&quot;:{&quot;
awk &#39;NR==FNR{a[$1]=$NF}NR&amp;gt;FNR{print &quot;        \&quot;&quot;$1&quot;\&quot;:\&quot;&quot; ($NF-a[$1])/5/1024&quot;MB/s\&quot;,&quot;}&#39; $tmp1 $tmp2
echo &quot;    }&quot;
rm $tmp1 $tmp2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section&quot;&gt;参考文档&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;&lt;a href=&quot;http://blog.csdn.net/imzoer/article/details/8734474&quot;&gt;http://blog.csdn.net/imzoer/article/details/8734474&lt;/a&gt;&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Tue, 21 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://louguanstar.com/2016/06/21/awk%E4%BD%BF%E7%94%A8NR%E4%B8%8EFNR%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6.html</link>
        <guid isPermaLink="true">http://louguanstar.com/2016/06/21/awk%E4%BD%BF%E7%94%A8NR%E4%B8%8EFNR%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%96%87%E4%BB%B6.html</guid>
        
        
      </item>
    
      <item>
        <title>Yarn配置kerberos需要在所有nodemanager添加用户</title>
        <description>&lt;p&gt;yarn添加kerberos认证需要在所有nodemanager上添加kerberos principal用户&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;发现问题&lt;/h3&gt;

&lt;p&gt;同事反应yarn提交任务有问题，发现yarn配置了kerberos认证，于是给新建的用户添加了principal，并且生成了keytab&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;添加principal
kadmin.local -q &quot;addprinc -randkey spark_deploy@LOUGUANSTAR.COM&quot;
生成keytab
kadmin.local -q &quot;ktadd -k spark_deploy.keytab spark_deploy@LOUGUANSTAR.COM&quot;

其他kerberos操作：
删除principal
kadmin.local -q &quot;delprinc spark_deploy@LOUGUANSTAR.COM&quot;
查看所有principal
./kadmin.local -q &quot;listprincs&quot; | grep spark
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后进行kerberos认证，尝试提交任务&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kinit -kt spark_deploy.keytab spark_deploy
hadoop jar  /usr/lib/hadoop-mapreduce/hadoop-mapreduce-examples-2.6.0-cdh5.5.2.jar pi 10 100
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;任务很快结束，jobhistory中找不到日志，resourcemanager中的报错信息很简短，错误信息大致如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;main : run as user is spark_deploy
main : requested yarn user is spark_deploy
User spark_deploy not found
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-1&quot;&gt;解决问题&lt;/h3&gt;

&lt;p&gt;始终觉得问题在设置yarn.nodemanager.linux-container-executor的问题上，如果没有设置kerberos认证那么可以指定运行yarn.nodemanager.linux-container-executor；配置了kerberos之后yarn任务的用户为kerberos principal中的用户如：spark_deploy@LOUGUANSTAR.COM中即为spark_deploy
经历了多半天各种调试，最后发现：&lt;code class=&quot;highlighter-rouge&quot;&gt;配置kerberos之后必须在每个nodemanager上新建kerberos principal中的用户&lt;/code&gt;，这样才能确保每个任务都可以在nodemanager上运行&lt;/p&gt;

&lt;p&gt;在所有nodemanager上添加spark_deploy用户，问题成功解决&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;参考文档&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;&lt;a href=&quot;https://community.cloudera.com/t5/Batch-Processing-and-Workflow/YARN-force-nobody-user-on-all-jobs-and-so-they-fail/td-p/26050&quot;&gt;https://community.cloudera.com/t5/Batch-Processing-and-Workflow/YARN-force-nobody-user-on-all-jobs-and-so-they-fail/td-p/26050&lt;/a&gt;&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 06 Jun 2016 00:00:00 +0800</pubDate>
        <link>http://louguanstar.com/2016/06/06/yarn%E9%85%8D%E7%BD%AEkerberos%E9%9C%80%E8%A6%81%E5%9C%A8%E6%89%80%E6%9C%89nodemanager%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7.html</link>
        <guid isPermaLink="true">http://louguanstar.com/2016/06/06/yarn%E9%85%8D%E7%BD%AEkerberos%E9%9C%80%E8%A6%81%E5%9C%A8%E6%89%80%E6%9C%89nodemanager%E6%B7%BB%E5%8A%A0%E7%94%A8%E6%88%B7.html</guid>
        
        
      </item>
    
      <item>
        <title>Linux网络基础命令</title>
        <description>&lt;p&gt;最近进行了网络迁移的工作，大致对linux的网络命令做一个简单的纪录&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;查看IP，基本网络配置&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip addr show  显示所有网络设备的ip等基本信息
ifconfig device_name  显示某块网卡的详细信息或者所有网卡的信息
 其中的frame表示由于CRC引起的错误包的数量，过多一般是硬件问题
overruns为网卡没有来的急处理丢掉的报
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;ethtool&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ethtool -i device_name 显示网络设备驱动信息
ethtool -S device_name 显示网络设备的详细统计信息（接收到的包，发出去的报，错误包等）
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;ping命令快速测试网络质量&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ping -c count -f IP   f参数为flood ping只有root用户可执行，可以用来测试网络质量，很快的发送上万个包
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;网络测试工具，检测
iperf测试网卡速度，iftop/iptraf Linux下监测网络流量工具&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;route&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;route add -net 192.168.1.0/255.255.255.0 gw 192.168.1.1  添加一条路由记录
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;小技巧，查看每个IP连接数
&lt;code class=&quot;highlighter-rouge&quot;&gt;
sed -n &#39;s%.* src=\([0-9]*.[0-9]*.[0-9.]*\).*%\1%p&#39; /proc/net/nf_conntrack  | sort | uniq -c   #部分机器可能不发查看
&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;netstat -n | awk &#39;/^tcp/ {n=split($(NF-1),array,&quot;:&quot;);if(n&amp;lt;=2)++S[array[(1)]];else++S[array[(4)]];++s[$NF];++N} END {for(a in S){printf(&quot;%-20s %s\n&quot;, a, S[a]);++I}printf(&quot;%-20s %s\n&quot;,&quot;TOTAL_IP&quot;,I);for(a in s) printf(&quot;%-20s %s\n&quot;,a, s[a]);printf(&quot;%-20s %s\n&quot;,&quot;TOTAL_LINK&quot;,N);}&#39;    #仅TCP连接
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
        <pubDate>Tue, 31 May 2016 00:00:00 +0800</pubDate>
        <link>http://louguanstar.com/2016/05/31/Linux%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4.html</link>
        <guid isPermaLink="true">http://louguanstar.com/2016/05/31/Linux%E7%BD%91%E7%BB%9C%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4.html</guid>
        
        
      </item>
    
      <item>
        <title>Bash的大括号高级特性</title>
        <description>&lt;p&gt;本文主要详细介绍Bash中{}的详细用法，由于Bash中的变量类型只有字符串故下文字符串与变量同指代Bash中的变量，部分配有例子。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;字符串基本&lt;/h3&gt;
&lt;p&gt;string=1234.123&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;分隔变量与字符串&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo ${string}1    #1234.1231
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;${#string}统计变量字符串长度&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo ${#string}    #8
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;${string:start:length}截取字符串，从第start个字符开始共length个字符&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;echo ${string:7:1}    #3
echo ${string:(-4)}    #.123
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-1&quot;&gt;字符串匹配切片（可用来踢去文件后缀，文件路径等）&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;${string#substring}删除最先匹配到的字符（substring）的左边&lt;/li&gt;
  &lt;li&gt;${string##substring}删除最后匹配到的字符（substring）的左边&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;stringZ=abcABC123ABCabc
#删除最先匹配的左边
echo ${stringZ#a*C}   #123ABCabc
#删除最后匹配到的左边
echo ${stringZ##a*C}   #abc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;${string%substring}从string后边开始匹配，删除最先匹配到（substring）的右边&lt;/li&gt;
  &lt;li&gt;${string%%substring}从string后边开始匹配，删除最后匹配到（substring）的右边&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;string=abcABC123ABCabc
echo ${string%abc}    #abcABC123ABC
echo ${string%%A*}    #abc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;注意&lt;code class=&quot;highlighter-rouge&quot;&gt;本小节中的substring必须为全匹配&lt;/code&gt;，所以例子中才会出现通配符*，如下：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;string=abcABC123ABCabc
echo ${string##123}    #abcABC123ABCabc
echo ${string%%123}    #abcABC123ABCabc
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-2&quot;&gt;字符串替换&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;${string/substring/replacement}    将第一个匹配到的substring替换为replacement&lt;/li&gt;
  &lt;li&gt;${string//substring/replacement}    将所有匹配到的substring替换为replacement&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;string=abcABC123ABCabc
echo ${string/abc/xyz}    #xyzABC123ABCabc
echo ${string//abc/xyz}    #xyzABC123ABCxyz
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;${string/#substring/replacement}   将字符串开始匹配（全匹配）到的第一个substring用replacement替换&lt;/li&gt;
  &lt;li&gt;${string/%substring/replacement}   从字符串末尾开始匹配，将第一个匹配（全匹配）到的substring用replacement替换&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;string=abcABC123ABCabc
echo ${string/#a*c/xyz}    #xyz
echo ${string/%abc/xyz}    #abcABC123ABCxyz
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;变量判断&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;${parameter-default}, ${parameter:-default}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果变量parameter没有赋值，default最为parameter默认值，:的区别在于变量parameter已经被声明但是null&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;${parameter=default}, ${parameter:=default}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果变量parameter没有声明，default最为parameter默认值，:的区别在于变量parameter已经被声明但是null&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;${parameter+alt_value}, ${parameter:+alt_value}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果变量parameter已经设定，使用alt_value，否则使用null&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;${parameter?err_msg}, ${parameter:?err_msg}，:的区别在于变量parameter已经被声明但是null&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果变量parameter已经设定，使用变量，否则打印err_msg退出脚本返回状态码1&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;参考文档与相关链接&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;&lt;a href=&quot;http://www.tldp.org/LDP/abs/abs-guide.pdf&quot;&gt;Advanced Bash-Scripting Guide&lt;/a&gt;&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Mon, 16 May 2016 00:00:00 +0800</pubDate>
        <link>http://louguanstar.com/2016/05/16/Bash%E7%9A%84%E5%A4%A7%E6%8B%AC%E5%8F%B7%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7.html</link>
        <guid isPermaLink="true">http://louguanstar.com/2016/05/16/Bash%E7%9A%84%E5%A4%A7%E6%8B%AC%E5%8F%B7%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7.html</guid>
        
        
      </item>
    
      <item>
        <title>Freebsd入门</title>
        <description>&lt;p&gt;FreeBSD作为一款Unix操作表现出强大的稳定性与安全性，乔布斯曾挖走FreeBSD的创始人去开发Mac OSX所依两者有很多相似的地方。个人使用感觉两者的稳定性比起Linux要优秀很多。今日闲来无事就在虚拟机上体验了下。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;软件管理&lt;/h3&gt;

&lt;p&gt;首先直接跳过了操作系统的安装，说实话对于一个熟悉Linux的人来说，FreeBSD的安装不会有什么大的问题。FreeBSD／OSX包含的工作也很多与Linux相同，这也是为什么很多码农喜欢用Mac的原因之一吧。&lt;/p&gt;

&lt;h4 id=&quot;pkgpackagesport&quot;&gt;pkg(packages)与port&lt;/h4&gt;

&lt;p&gt;packages与port都为FreeBSD下安装程序的工具，packages用来安装二进制包，ports使用源码来安装程序。两者都可以处理包的依赖关系，使用packages或port来安装应用时都会安装有相应依赖关系的程序或者库。以下为两者的一些主要区别：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;一个压缩过的二进制安装包通常比一个包含源码的包小&lt;/li&gt;
  &lt;li&gt;Packages不需要额外的编译时间，对于大的应用比如：FireFox，KED，GNOME编译会比较久&lt;/li&gt;
  &lt;li&gt;使用port编译时可以添加一些编译选项，比如编译Apache可以指定包含哪些模块，二进制包能包含大多数情况&lt;/li&gt;
  &lt;li&gt;有些许可禁止使用二进制包分发&lt;/li&gt;
  &lt;li&gt;有人可能觉得二进制包不安全或者喜欢通过阅读源码去解决一些问题&lt;/li&gt;
  &lt;li&gt;源码对自己打补丁很有用&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;最新的FreeBSD已经抛弃老的pkg工作，老式的系统安装软件使用pkg_add，现在的则是pkg install。在最近的FreeBSD中pkg与yum／apt这类工具更相似，使得FreeBSD下安装软件更容易。不过由于FreeBSD最近才切换到新的pkg，所以如果你使用的FreeBSD10.X（9.X未验证，8.X都是老的pkg）就可以方便的使用pkg，不过由于这个比较新所以国内没有可用的pkg源，包括阿里、中科大等都没有源可用，国内使用体验很是不好（全球官方列出的源也不超过10个）。&lt;/p&gt;

&lt;h4 id=&quot;pkg&quot;&gt;pkg使用&lt;/h4&gt;

&lt;ol&gt;
  &lt;li&gt;查找软件&lt;code class=&quot;highlighter-rouge&quot;&gt;pkg search package_name&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;安装软件&lt;code class=&quot;highlighter-rouge&quot;&gt;pkg install package_name&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;删除软件&lt;code class=&quot;highlighter-rouge&quot;&gt;pkg delete package_name&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;删除不再需要的依赖&lt;code class=&quot;highlighter-rouge&quot;&gt;pkg autoremove&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;section-1&quot;&gt;参考文档与相关链接&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;ol&gt;
    &lt;li&gt;handbook,FreeBSD的官方文档还是很齐全的，需要什么都可以去官网找到，绝对应用尽有&lt;/li&gt;
    &lt;li&gt;&lt;a href=&quot;ftp://ftp.cn.freebsd.org/pub/FreeBSD/&quot;&gt;官方FTP中国站点：ftp://ftp.cn.freebsd.org/pub/FreeBSD/&lt;/a&gt;&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Wed, 04 May 2016 00:00:00 +0800</pubDate>
        <link>http://louguanstar.com/2016/05/04/FreeBSD%E5%85%A5%E9%97%A8.html</link>
        <guid isPermaLink="true">http://louguanstar.com/2016/05/04/FreeBSD%E5%85%A5%E9%97%A8.html</guid>
        
        
      </item>
    
      <item>
        <title>Ssh一些技巧与注意事项</title>
        <description>&lt;p&gt;主要记录平时使用SSH过程中积累的一些经验&lt;/p&gt;

&lt;h3 id=&quot;ssh&quot;&gt;关于SSH密钥&lt;/h3&gt;

&lt;p&gt;SSH生成密钥的命令，使用下面的命令可直接生成密钥，避免交互输入，可直接写成shell脚本&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh-keygen -t rsa -P &#39;&#39; -f ~/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;ssh-1&quot;&gt;需要注意的，会引起SSH无密钥无法工作&lt;/h3&gt;

&lt;p&gt;SSH以无密钥运行时会检测文件系统相关文件的权限，如若文件权限不合适，SSH会认为不安全，造成无密钥无法连接&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;用户Home目录权限应为755/644组成员与其他人不可拥有写入权限&lt;/li&gt;
  &lt;li&gt;.ssh目录权限应为700&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;很多时候出问题的地方在用户Home目录，.ssh目录可用ssh-keygen命令生成，一般问题不大&lt;/p&gt;

&lt;p&gt;使用了selinux策略的系统，selinux可能会造成无密钥无法连接&lt;/p&gt;
</description>
        <pubDate>Tue, 03 May 2016 00:00:00 +0800</pubDate>
        <link>http://louguanstar.com/2016/05/03/SSH%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7%E4%B8%8E%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.html</link>
        <guid isPermaLink="true">http://louguanstar.com/2016/05/03/SSH%E4%B8%80%E4%BA%9B%E6%8A%80%E5%B7%A7%E4%B8%8E%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9.html</guid>
        
        
      </item>
    
  </channel>
</rss>
